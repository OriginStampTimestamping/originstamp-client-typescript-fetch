/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://doc.originstamp.org
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.originstamp.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * The default service response object uses error code and message to indicate errors. These errors are handled by the client.
 * @export
 * @interface DefaultSchedulerResponse
 */
export interface DefaultSchedulerResponse {
    /**
     * Generic response object which contains the response data, e.g. timestamp information.
     * @type {SchedulerResponse}
     * @memberof DefaultSchedulerResponse
     */
    data?: SchedulerResponse;
    /**
     * Contains the error of the request. If the error code is 0, everything is fine.
     * @type {number}
     * @memberof DefaultSchedulerResponse
     */
    errorCode?: number;
    /**
     * Contains the error message, that possibly occurred. If it is empty, everything is fine.
     * @type {string}
     * @memberof DefaultSchedulerResponse
     */
    errorMessage?: string;
}

/**
 * The default service response object uses error code and message to indicate errors. These errors are handled by the client.
 * @export
 * @interface DefaultTimestampResponse
 */
export interface DefaultTimestampResponse {
    /**
     * Generic response object which contains the response data, e.g. timestamp information.
     * @type {TimestampResponse}
     * @memberof DefaultTimestampResponse
     */
    data?: TimestampResponse;
    /**
     * Contains the error of the request. If the error code is 0, everything is fine.
     * @type {number}
     * @memberof DefaultTimestampResponse
     */
    errorCode?: number;
    /**
     * Contains the error message, that possibly occurred. If it is empty, everything is fine.
     * @type {string}
     * @memberof DefaultTimestampResponse
     */
    errorMessage?: string;
}

/**
 * The default service response object uses error code and message to indicate errors. These errors are handled by the client.
 * @export
 * @interface DefaultUsageResponse
 */
export interface DefaultUsageResponse {
    /**
     * Generic response object which contains the response data, e.g. timestamp information.
     * @type {UsageResponse}
     * @memberof DefaultUsageResponse
     */
    data?: UsageResponse;
    /**
     * Contains the error of the request. If the error code is 0, everything is fine.
     * @type {number}
     * @memberof DefaultUsageResponse
     */
    errorCode?: number;
    /**
     * Contains the error message, that possibly occurred. If it is empty, everything is fine.
     * @type {string}
     * @memberof DefaultUsageResponse
     */
    errorMessage?: string;
}

/**
 * The default service response object uses error code and message to indicate errors. These errors are handled by the client.
 * @export
 * @interface Defaultstring
 */
export interface Defaultstring {
    /**
     * Generic response object which contains the response data, e.g. timestamp information.
     * @type {string}
     * @memberof Defaultstring
     */
    data?: string;
    /**
     * Contains the error of the request. If the error code is 0, everything is fine.
     * @type {number}
     * @memberof Defaultstring
     */
    errorCode?: number;
    /**
     * Contains the error message, that possibly occurred. If it is empty, everything is fine.
     * @type {string}
     * @memberof Defaultstring
     */
    errorMessage?: string;
}

/**
 * DTO object for notifications.
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 0: Bitcoin
     * @type {number}
     * @memberof Notification
     */
    currency: number;
    /**
     * 0: notify via email  1: notify a webhook
     * @type {number}
     * @memberof Notification
     */
    notificationType: number;
    /**
     * Depending on the notification type, specify the target for the notification (e.g. email address or webhook url). The webhook url will reveive a POST request after timestamp was successfully created.
     * @type {string}
     * @memberof Notification
     */
    target: string;
}

/**
 * request object for proof request.
 * @export
 * @interface ProofRequest
 */
export interface ProofRequest {
    /**
     * 0: Bitcoin
     * @type {number}
     * @memberof ProofRequest
     */
    currency: number;
    /**
     * Hash in HEX representation for which the proof should be created. We allow the use of SHA-256. Note: We handle the hashes in lower-case.
     * @type {string}
     * @memberof ProofRequest
     */
    hashString: string;
    /**
     * Specifies which type of file should be returned. Possible value(s):  0: proof with a seed file (txt) or proof with a merkle tree (xml) 1: proof with a PDF file   Other formats will follow.
     * @type {number}
     * @memberof ProofRequest
     */
    proofType: number;
}

/**
 * 
 * @export
 * @interface ResponseEntity
 */
export interface ResponseEntity {
    /**
     * 
     * @type {any}
     * @memberof ResponseEntity
     */
    body?: any;
    /**
     * 
     * @type {string}
     * @memberof ResponseEntity
     */
    statusCode?: ResponseEntity.StatusCodeEnum;
    /**
     * 
     * @type {number}
     * @memberof ResponseEntity
     */
    statusCodeValue?: number;
}

/**
 * @export
 * @namespace ResponseEntity
 */
export namespace ResponseEntity {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusCodeEnum {
        _100 = <any> '100',
        _101 = <any> '101',
        _102 = <any> '102',
        _103 = <any> '103',
        _200 = <any> '200',
        _201 = <any> '201',
        _202 = <any> '202',
        _203 = <any> '203',
        _204 = <any> '204',
        _205 = <any> '205',
        _206 = <any> '206',
        _207 = <any> '207',
        _208 = <any> '208',
        _226 = <any> '226',
        _300 = <any> '300',
        _301 = <any> '301',
        _302 = <any> '302',
        _303 = <any> '303',
        _304 = <any> '304',
        _305 = <any> '305',
        _307 = <any> '307',
        _308 = <any> '308',
        _400 = <any> '400',
        _401 = <any> '401',
        _402 = <any> '402',
        _403 = <any> '403',
        _404 = <any> '404',
        _405 = <any> '405',
        _406 = <any> '406',
        _407 = <any> '407',
        _408 = <any> '408',
        _409 = <any> '409',
        _410 = <any> '410',
        _411 = <any> '411',
        _412 = <any> '412',
        _413 = <any> '413',
        _414 = <any> '414',
        _415 = <any> '415',
        _416 = <any> '416',
        _417 = <any> '417',
        _418 = <any> '418',
        _419 = <any> '419',
        _420 = <any> '420',
        _421 = <any> '421',
        _422 = <any> '422',
        _423 = <any> '423',
        _424 = <any> '424',
        _426 = <any> '426',
        _428 = <any> '428',
        _429 = <any> '429',
        _431 = <any> '431',
        _451 = <any> '451',
        _500 = <any> '500',
        _501 = <any> '501',
        _502 = <any> '502',
        _503 = <any> '503',
        _504 = <any> '504',
        _505 = <any> '505',
        _506 = <any> '506',
        _507 = <any> '507',
        _508 = <any> '508',
        _509 = <any> '509',
        _510 = <any> '510',
        _511 = <any> '511'
    }
}

/**
 * DTO for schedule request.
 * @export
 * @interface SchedulerRequest
 */
export interface SchedulerRequest {
    /**
     * Currency for which the next submission time should be retrieved.  0: Bitcoin
     * @type {number}
     * @memberof SchedulerRequest
     */
    currency?: number;
}

/**
 * DTO which contains nxt submission time.
 * @export
 * @interface SchedulerResponse
 */
export interface SchedulerResponse {
    /**
     * Next submission time. The date is returned in the following format: [ms] since 1.1.1970 (unix epoch), timezone: UTC. The timezone is UTC.
     * @type {number}
     * @memberof SchedulerResponse
     */
    submissionTime?: number;
}

/**
 * DTO for the timestamp data.
 * @export
 * @interface TimestampData
 */
export interface TimestampData {
    /**
     * 0: Bitcoin
     * @type {number}
     * @memberof TimestampData
     */
    currencyId?: number;
    /**
     * The private key represents the top hash in the Merkle Tree (see https://en.wikipedia.org/wiki/Merkle_tree ) or the hash of all hashes in the transaction.
     * @type {string}
     * @memberof TimestampData
     */
    privateKey?: string;
    /**
     * The submit status of the hash:   0: the hash was not broadcasted yet  1: the hash was included into a transaction and broadcasted to the network, but not included into a block  2: the transaction was included into the latest block  3: the timestamp for your hash was successfully created.
     * @type {number}
     * @memberof TimestampData
     */
    submitStatus?: number;
    /**
     * The date is returned in the following format: [ms] since 1.1.1970 (unix epoch), timezone: UTC. This is a true timestamp.
     * @type {number}
     * @memberof TimestampData
     */
    timestamp?: number;
    /**
     * If available: the transaction hash of the timestamp.
     * @type {string}
     * @memberof TimestampData
     */
    transaction?: string;
}

/**
 * request object for a timestamp request.
 * @export
 * @interface TimestampRequest
 */
export interface TimestampRequest {
    /**
     * You can add a short comment (max. 256 characters) which can be used for indexing and searching (public).
     * @type {string}
     * @memberof TimestampRequest
     */
    comment?: string;
    /**
     * Hash in HEX representation. We suggest to use SHA-256. This hash will be aggregated and included into the blockchain.
     * @type {string}
     * @memberof TimestampRequest
     */
    hash: string;
    /**
     * Add a notification/notification list to your submission. Our system will notify the specified target with the timestamp information.
     * @type {Array&lt;Notification&gt;}
     * @memberof TimestampRequest
     */
    notifications?: Array<Notification>;
    /**
     * Preprint URL. Insert the generated UUID here. You can generate an UUID-4 and include it into your document: https://originstamp.org/u/uuid4. When submitting the your file, the url is part of the hash, which finally means it the link to the timestamp is part of the timestamp.
     * @type {string}
     * @memberof TimestampRequest
     */
    url?: string;
}

/**
 * Response object for the timestamp response. Create, Status and Webhookshare the same object. This saves customers additional implementation work, as the requests or data only have to be understood once.The difference is that the webhook is only triggered as soon as a tamper-proof timestamp exists.
 * @export
 * @interface TimestampResponse
 */
export interface TimestampResponse {
    /**
     * The comment which was added in the submission of the hash.
     * @type {string}
     * @memberof TimestampResponse
     */
    comment?: string;
    /**
     * Field is set to true if it is a novel hash. If the flag is false, the hash was already submitted before.
     * @type {boolean}
     * @memberof TimestampResponse
     */
    created?: boolean;
    /**
     * The time when your hash was submitted to OriginStamp. The date is returned in the following format: [ms] since 1.1.1970 (unix epoch), timezone: UTC. This is not considered as a true timestamp.
     * @type {number}
     * @memberof TimestampResponse
     */
    dateCreated?: number;
    /**
     * The submitted hash in hex representation.
     * @type {string}
     * @memberof TimestampResponse
     */
    hashString?: string;
    /**
     * Contains all the timestamp data of your hash until now.
     * @type {Array&lt;TimestampData&gt;}
     * @memberof TimestampResponse
     */
    timestamps?: Array<TimestampData>;
}

/**
 * Get the current credit usage for this month.
 * @export
 * @interface UsageResponse
 */
export interface UsageResponse {
    /**
     * Represents the number of used credits for the current month.
     * @type {number}
     * @memberof UsageResponse
     */
    consumedCredits?: number;
    /**
     * Represents the total number of credits per month.
     * @type {number}
     * @memberof UsageResponse
     */
    creditsPerMonth?: number;
    /**
     * Represents the remaining number of credits for the current month.
     * @type {number}
     * @memberof UsageResponse
     */
    remainingCredits?: number;
}

/**
 * Request object for a manual webhook request.
 * @export
 * @interface WebhookRequest
 */
export interface WebhookRequest {
    /**
     * SHA-256 Hash in Hex representation
     * @type {string}
     * @memberof WebhookRequest
     */
    hash: string;
    /**
     * target url that should receive the webhook
     * @type {string}
     * @memberof WebhookRequest
     */
    webhookUrl: string;
}


/**
 * SchedulerApi - fetch parameter creator
 * @export
 */
export const SchedulerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the next scheduling time for hash submissions to the blockchain.
         * @summary NextSchedule
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {SchedulerRequest} schedulerRequest Request DTO for next schedules.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextSchedulingTime(authorization: string, schedulerRequest: SchedulerRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getNextSchedulingTime.');
            }
            // verify required parameter 'schedulerRequest' is not null or undefined
            if (schedulerRequest === null || schedulerRequest === undefined) {
                throw new RequiredError('schedulerRequest','Required parameter schedulerRequest was null or undefined when calling getNextSchedulingTime.');
            }
            const localVarPath = `/v3/submission/times`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SchedulerRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(schedulerRequest || {}) : (schedulerRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchedulerApi - functional programming interface
 * @export
 */
export const SchedulerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the next scheduling time for hash submissions to the blockchain.
         * @summary NextSchedule
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {SchedulerRequest} schedulerRequest Request DTO for next schedules.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextSchedulingTime(authorization: string, schedulerRequest: SchedulerRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DefaultSchedulerResponse> {
            const localVarFetchArgs = SchedulerApiFetchParamCreator(configuration).getNextSchedulingTime(authorization, schedulerRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SchedulerApi - factory interface
 * @export
 */
export const SchedulerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get the next scheduling time for hash submissions to the blockchain.
         * @summary NextSchedule
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {SchedulerRequest} schedulerRequest Request DTO for next schedules.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextSchedulingTime(authorization: string, schedulerRequest: SchedulerRequest, options?: any) {
            return SchedulerApiFp(configuration).getNextSchedulingTime(authorization, schedulerRequest, options)(fetch, basePath);
        },
    };
};

/**
 * SchedulerApi - object-oriented interface
 * @export
 * @class SchedulerApi
 * @extends {BaseAPI}
 */
export class SchedulerApi extends BaseAPI {
    /**
     * Get the next scheduling time for hash submissions to the blockchain.
     * @summary NextSchedule
     * @param {} authorization A valid API key is essential for authorization to handle the request.
     * @param {} schedulerRequest Request DTO for next schedules.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulerApi
     */
    public getNextSchedulingTime(authorization: string, schedulerRequest: SchedulerRequest, options?: any) {
        return SchedulerApiFp(this.configuration).getNextSchedulingTime(authorization, schedulerRequest, options)(this.fetch, this.basePath);
    }

}

/**
 * TimestampApi - fetch parameter creator
 * @export
 */
export const TimestampApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You can submit your hash with this function. If your api key is valid, your hash is added to batch and is scheduled for timestamping. If the hash already exists, the created flag in the response is set to false and the notification(s) of the current request will be totally ignored. You are also able to submit additional information, such as comment or notification credentials. Once a hash is successfully created for a certain crypto-currency, we can notify your desired target with the timestamp information (POST Request). The webhook is triggered as soon as the tamper-proof timestamp with the selected crypto currency has been created. Additionally, it is possible to include a preprint URL in the hash submission. Before the generation of the timestamp hash you can create a random UUID Version 4 and include https://originstamp.com/u/UUID where UUID is your UUID e.g. in a document you want to timestamp. In the preprint URL field you include your UUID and then it is possible to verify the timestamp within the document (or whatever). 
         * @summary Submission
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {TimestampRequest} timestampRequest DTO for the hash submission. Add all relevant information concerning your hash submission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimestamp(authorization: string, timestampRequest: TimestampRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createTimestamp.');
            }
            // verify required parameter 'timestampRequest' is not null or undefined
            if (timestampRequest === null || timestampRequest === undefined) {
                throw new RequiredError('timestampRequest','Required parameter timestampRequest was null or undefined when calling createTimestamp.');
            }
            const localVarPath = `/v3/timestamp/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TimestampRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(timestampRequest || {}) : (timestampRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * With this interface you can receive the current api usage.
         * @summary Usage
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeyUsage(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getApiKeyUsage.');
            }
            const localVarPath = `/v3/api_key/usage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The request returns information of a certain hash read from the URL parameter. The input parameter is a hash in hex representation. Field \"created\" always set to false.
         * @summary Status
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {string} hashString The hash in string representation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHashStatus(authorization: string, hashString: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getHashStatus.');
            }
            // verify required parameter 'hashString' is not null or undefined
            if (hashString === null || hashString === undefined) {
                throw new RequiredError('hashString','Required parameter hashString was null or undefined when calling getHashStatus.');
            }
            const localVarPath = `/v3/timestamp/{hash_string}`
                .replace(`{${"hash_string"}}`, encodeURIComponent(String(hashString)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This request can be used to proof a submission of a hash. This interface is required to request the evidence. With the help of this proof the verification of a timestamp independent from OriginStamp is necessary. A guide for the verification can be found herehttps://github.com/OriginStampTimestamping/originstamp-verification . Usually, the proof should be requested for each transferred hash and kept with the timestamped data so that an independent verification of the timestamp is possible at any time. As input, the used currency, the hash string and the type of proof is required. Then a file with the information for the submission proof will be returned. If the hash was submitted in an API version lower than 3, a XML file containing the essential information of the Merkle Tree will be returned. Otherwise, the seed file will be returned.  The file name can be found in the header of the response. An example could look like this: content-disposition: attachment; filename=\"certificate_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.pdf\" A sample XML file can be found here https://originstamp.org/assets/proof/proof_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.xml and a sample PDF can be found here https://originstamp.org/assets/proof/certificate_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.pdf .
         * @summary Proof
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {ProofRequest} proofRequest Information needed to return the hash status information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProof(authorization: string, proofRequest: ProofRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getProof.');
            }
            // verify required parameter 'proofRequest' is not null or undefined
            if (proofRequest === null || proofRequest === undefined) {
                throw new RequiredError('proofRequest','Required parameter proofRequest was null or undefined when calling getProof.');
            }
            const localVarPath = `/v3/timestamp/proof`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProofRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(proofRequest || {}) : (proofRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * With this interface you can trigger manual webhook to see how a webhooks looks like. Please use a hash, that was already timestamped before such as https://originstamp.org/s/9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 . Usually, the webhook is triggered as soon as the tamper-proof time stamp with the selected crypto currency has been created.
         * @summary Dev
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {WebhookRequest} webhookRequest DTO for webhook request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerTimestampWebhook(authorization: string, webhookRequest: WebhookRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling triggerTimestampWebhook.');
            }
            // verify required parameter 'webhookRequest' is not null or undefined
            if (webhookRequest === null || webhookRequest === undefined) {
                throw new RequiredError('webhookRequest','Required parameter webhookRequest was null or undefined when calling triggerTimestampWebhook.');
            }
            const localVarPath = `/v3/webhook/start`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WebhookRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(webhookRequest || {}) : (webhookRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimestampApi - functional programming interface
 * @export
 */
export const TimestampApiFp = function(configuration?: Configuration) {
    return {
        /**
         * You can submit your hash with this function. If your api key is valid, your hash is added to batch and is scheduled for timestamping. If the hash already exists, the created flag in the response is set to false and the notification(s) of the current request will be totally ignored. You are also able to submit additional information, such as comment or notification credentials. Once a hash is successfully created for a certain crypto-currency, we can notify your desired target with the timestamp information (POST Request). The webhook is triggered as soon as the tamper-proof timestamp with the selected crypto currency has been created. Additionally, it is possible to include a preprint URL in the hash submission. Before the generation of the timestamp hash you can create a random UUID Version 4 and include https://originstamp.com/u/UUID where UUID is your UUID e.g. in a document you want to timestamp. In the preprint URL field you include your UUID and then it is possible to verify the timestamp within the document (or whatever). 
         * @summary Submission
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {TimestampRequest} timestampRequest DTO for the hash submission. Add all relevant information concerning your hash submission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimestamp(authorization: string, timestampRequest: TimestampRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DefaultTimestampResponse> {
            const localVarFetchArgs = TimestampApiFetchParamCreator(configuration).createTimestamp(authorization, timestampRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * With this interface you can receive the current api usage.
         * @summary Usage
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeyUsage(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DefaultUsageResponse> {
            const localVarFetchArgs = TimestampApiFetchParamCreator(configuration).getApiKeyUsage(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The request returns information of a certain hash read from the URL parameter. The input parameter is a hash in hex representation. Field \"created\" always set to false.
         * @summary Status
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {string} hashString The hash in string representation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHashStatus(authorization: string, hashString: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DefaultTimestampResponse> {
            const localVarFetchArgs = TimestampApiFetchParamCreator(configuration).getHashStatus(authorization, hashString, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This request can be used to proof a submission of a hash. This interface is required to request the evidence. With the help of this proof the verification of a timestamp independent from OriginStamp is necessary. A guide for the verification can be found herehttps://github.com/OriginStampTimestamping/originstamp-verification . Usually, the proof should be requested for each transferred hash and kept with the timestamped data so that an independent verification of the timestamp is possible at any time. As input, the used currency, the hash string and the type of proof is required. Then a file with the information for the submission proof will be returned. If the hash was submitted in an API version lower than 3, a XML file containing the essential information of the Merkle Tree will be returned. Otherwise, the seed file will be returned.  The file name can be found in the header of the response. An example could look like this: content-disposition: attachment; filename=\"certificate_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.pdf\" A sample XML file can be found here https://originstamp.org/assets/proof/proof_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.xml and a sample PDF can be found here https://originstamp.org/assets/proof/certificate_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.pdf .
         * @summary Proof
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {ProofRequest} proofRequest Information needed to return the hash status information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProof(authorization: string, proofRequest: ProofRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = TimestampApiFetchParamCreator(configuration).getProof(authorization, proofRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * With this interface you can trigger manual webhook to see how a webhooks looks like. Please use a hash, that was already timestamped before such as https://originstamp.org/s/9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 . Usually, the webhook is triggered as soon as the tamper-proof time stamp with the selected crypto currency has been created.
         * @summary Dev
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {WebhookRequest} webhookRequest DTO for webhook request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerTimestampWebhook(authorization: string, webhookRequest: WebhookRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Defaultstring> {
            const localVarFetchArgs = TimestampApiFetchParamCreator(configuration).triggerTimestampWebhook(authorization, webhookRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TimestampApi - factory interface
 * @export
 */
export const TimestampApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * You can submit your hash with this function. If your api key is valid, your hash is added to batch and is scheduled for timestamping. If the hash already exists, the created flag in the response is set to false and the notification(s) of the current request will be totally ignored. You are also able to submit additional information, such as comment or notification credentials. Once a hash is successfully created for a certain crypto-currency, we can notify your desired target with the timestamp information (POST Request). The webhook is triggered as soon as the tamper-proof timestamp with the selected crypto currency has been created. Additionally, it is possible to include a preprint URL in the hash submission. Before the generation of the timestamp hash you can create a random UUID Version 4 and include https://originstamp.com/u/UUID where UUID is your UUID e.g. in a document you want to timestamp. In the preprint URL field you include your UUID and then it is possible to verify the timestamp within the document (or whatever). 
         * @summary Submission
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {TimestampRequest} timestampRequest DTO for the hash submission. Add all relevant information concerning your hash submission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimestamp(authorization: string, timestampRequest: TimestampRequest, options?: any) {
            return TimestampApiFp(configuration).createTimestamp(authorization, timestampRequest, options)(fetch, basePath);
        },
        /**
         * With this interface you can receive the current api usage.
         * @summary Usage
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeyUsage(authorization: string, options?: any) {
            return TimestampApiFp(configuration).getApiKeyUsage(authorization, options)(fetch, basePath);
        },
        /**
         * The request returns information of a certain hash read from the URL parameter. The input parameter is a hash in hex representation. Field \"created\" always set to false.
         * @summary Status
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {string} hashString The hash in string representation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHashStatus(authorization: string, hashString: string, options?: any) {
            return TimestampApiFp(configuration).getHashStatus(authorization, hashString, options)(fetch, basePath);
        },
        /**
         * This request can be used to proof a submission of a hash. This interface is required to request the evidence. With the help of this proof the verification of a timestamp independent from OriginStamp is necessary. A guide for the verification can be found herehttps://github.com/OriginStampTimestamping/originstamp-verification . Usually, the proof should be requested for each transferred hash and kept with the timestamped data so that an independent verification of the timestamp is possible at any time. As input, the used currency, the hash string and the type of proof is required. Then a file with the information for the submission proof will be returned. If the hash was submitted in an API version lower than 3, a XML file containing the essential information of the Merkle Tree will be returned. Otherwise, the seed file will be returned.  The file name can be found in the header of the response. An example could look like this: content-disposition: attachment; filename=\"certificate_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.pdf\" A sample XML file can be found here https://originstamp.org/assets/proof/proof_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.xml and a sample PDF can be found here https://originstamp.org/assets/proof/certificate_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.pdf .
         * @summary Proof
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {ProofRequest} proofRequest Information needed to return the hash status information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProof(authorization: string, proofRequest: ProofRequest, options?: any) {
            return TimestampApiFp(configuration).getProof(authorization, proofRequest, options)(fetch, basePath);
        },
        /**
         * With this interface you can trigger manual webhook to see how a webhooks looks like. Please use a hash, that was already timestamped before such as https://originstamp.org/s/9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 . Usually, the webhook is triggered as soon as the tamper-proof time stamp with the selected crypto currency has been created.
         * @summary Dev
         * @param {string} authorization A valid API key is essential for authorization to handle the request.
         * @param {WebhookRequest} webhookRequest DTO for webhook request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerTimestampWebhook(authorization: string, webhookRequest: WebhookRequest, options?: any) {
            return TimestampApiFp(configuration).triggerTimestampWebhook(authorization, webhookRequest, options)(fetch, basePath);
        },
    };
};

/**
 * TimestampApi - object-oriented interface
 * @export
 * @class TimestampApi
 * @extends {BaseAPI}
 */
export class TimestampApi extends BaseAPI {
    /**
     * You can submit your hash with this function. If your api key is valid, your hash is added to batch and is scheduled for timestamping. If the hash already exists, the created flag in the response is set to false and the notification(s) of the current request will be totally ignored. You are also able to submit additional information, such as comment or notification credentials. Once a hash is successfully created for a certain crypto-currency, we can notify your desired target with the timestamp information (POST Request). The webhook is triggered as soon as the tamper-proof timestamp with the selected crypto currency has been created. Additionally, it is possible to include a preprint URL in the hash submission. Before the generation of the timestamp hash you can create a random UUID Version 4 and include https://originstamp.com/u/UUID where UUID is your UUID e.g. in a document you want to timestamp. In the preprint URL field you include your UUID and then it is possible to verify the timestamp within the document (or whatever). 
     * @summary Submission
     * @param {} authorization A valid API key is essential for authorization to handle the request.
     * @param {} timestampRequest DTO for the hash submission. Add all relevant information concerning your hash submission.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampApi
     */
    public createTimestamp(authorization: string, timestampRequest: TimestampRequest, options?: any) {
        return TimestampApiFp(this.configuration).createTimestamp(authorization, timestampRequest, options)(this.fetch, this.basePath);
    }

    /**
     * With this interface you can receive the current api usage.
     * @summary Usage
     * @param {} authorization A valid API key is essential for authorization to handle the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampApi
     */
    public getApiKeyUsage(authorization: string, options?: any) {
        return TimestampApiFp(this.configuration).getApiKeyUsage(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * The request returns information of a certain hash read from the URL parameter. The input parameter is a hash in hex representation. Field \"created\" always set to false.
     * @summary Status
     * @param {} authorization A valid API key is essential for authorization to handle the request.
     * @param {} hashString The hash in string representation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampApi
     */
    public getHashStatus(authorization: string, hashString: string, options?: any) {
        return TimestampApiFp(this.configuration).getHashStatus(authorization, hashString, options)(this.fetch, this.basePath);
    }

    /**
     * This request can be used to proof a submission of a hash. This interface is required to request the evidence. With the help of this proof the verification of a timestamp independent from OriginStamp is necessary. A guide for the verification can be found herehttps://github.com/OriginStampTimestamping/originstamp-verification . Usually, the proof should be requested for each transferred hash and kept with the timestamped data so that an independent verification of the timestamp is possible at any time. As input, the used currency, the hash string and the type of proof is required. Then a file with the information for the submission proof will be returned. If the hash was submitted in an API version lower than 3, a XML file containing the essential information of the Merkle Tree will be returned. Otherwise, the seed file will be returned.  The file name can be found in the header of the response. An example could look like this: content-disposition: attachment; filename=\"certificate_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.pdf\" A sample XML file can be found here https://originstamp.org/assets/proof/proof_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.xml and a sample PDF can be found here https://originstamp.org/assets/proof/certificate_6d70a947e19398f1106ad70a60bd34a8305bdcb624b5b7d43782315517e79cad.pdf .
     * @summary Proof
     * @param {} authorization A valid API key is essential for authorization to handle the request.
     * @param {} proofRequest Information needed to return the hash status information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampApi
     */
    public getProof(authorization: string, proofRequest: ProofRequest, options?: any) {
        return TimestampApiFp(this.configuration).getProof(authorization, proofRequest, options)(this.fetch, this.basePath);
    }

    /**
     * With this interface you can trigger manual webhook to see how a webhooks looks like. Please use a hash, that was already timestamped before such as https://originstamp.org/s/9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 . Usually, the webhook is triggered as soon as the tamper-proof time stamp with the selected crypto currency has been created.
     * @summary Dev
     * @param {} authorization A valid API key is essential for authorization to handle the request.
     * @param {} webhookRequest DTO for webhook request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampApi
     */
    public triggerTimestampWebhook(authorization: string, webhookRequest: WebhookRequest, options?: any) {
        return TimestampApiFp(this.configuration).triggerTimestampWebhook(authorization, webhookRequest, options)(this.fetch, this.basePath);
    }

}

